plugins {
  id 'com.android.application'
  id 'kotlin-android'
  id 'kotlin-kapt'
  id 'dependencies'
  id 'androidx.navigation.safeargs'
  id 'dagger.hilt.android.plugin'
}

android {
  compileSdkVersion Versions.compileSdkVersion
  compileOptions.incremental = false

  defaultConfig {
    applicationId AppDetail.applicationId
    minSdkVersion Versions.minSdkVersion
    targetSdkVersion Versions.targetSdkVersion
    versionName AppDetail.versionName
    versionCode AppDetail.versionCode
    multiDexEnabled true

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    testInstrumentationRunnerArguments clearPackageData: 'true'
    ndk.abiFilters 'arm64-v8a', 'x86_64', 'x86'
  }
  buildFeatures {
    viewBinding true
  }

  File signFile = rootProject.file('keystore.properties')
  if (signFile.exists()) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(signFile))
    signingConfigs {

      debug {
        storeFile file(properties['debugKeystorePath'])
        storePassword properties['debugStorePassword']
        keyAlias properties['debugKeyAlias']
        keyPassword properties['debugKeyPassword']
      }

      baseProduct {
        storeFile file(properties['productKeystorePath'])
        storePassword properties['productStorePassword']
        keyAlias properties['productKeyAlias']
        keyPassword properties['productKeyPassword']
      }

      clientOne {
        storeFile file(properties['productKeystorePath'])
        storePassword properties['productStorePassword']
        keyAlias properties['productKeyAlias']
        keyPassword properties['productKeyPassword']
      }

      clientTwo {
        storeFile file(properties['productKeystorePath'])
        storePassword properties['productStorePassword']
        keyAlias properties['productKeyAlias']
        keyPassword properties['productKeyPassword']
      }
    }
  }

  flavorDimensions "client","server"
  productFlavors {
    baseProduct{
      dimension "client"
      applicationIdSuffix ".baseproduct"
    }
     clientOne{
       dimension "client"
       applicationIdSuffix ".clientone"
     }
    clientTwo{
      dimension "client"
      applicationIdSuffix ".clienttwo"
    }
    dev {
      dimension "server"
    }
    prod {
      dimension "server"
    }
  }

  buildTypes {
    debug {
      versionNameSuffix "-debug"
      debuggable true
      minifyEnabled false
      shrinkResources false
      signingConfig signingConfigs.debug
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }

    release {
      versionNameSuffix "-release"
      minifyEnabled true
      shrinkResources true
      debuggable false
      productFlavors.baseProduct.signingConfig signingConfigs.baseProduct
      productFlavors.clientOne.signingConfig signingConfigs.clientOne
      productFlavors.clientTwo.signingConfig signingConfigs.clientTwo
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  lintOptions {
    // set to true to turn off analysis progress reporting by lint
    quiet true
    // if true, stop the gradle build if errors are found
    abortOnError false
    // if true, only report errors
    ignoreWarnings false

    disable 'MissingTranslation'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11.toString()
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

  implementation project(':featureone')
  implementation project(':featuretwo')
  implementation project(':core')

  implementation Dependencies.kotlinCore
  implementation Dependencies.appCompat
  implementation Dependencies.constraintLayout
  implementation Dependencies.material
  implementation Dependencies.recyclerView
  implementation Dependencies.cardView

  // Hilt
  implementation Dependencies.hiltCore
  implementation Dependencies.hiltCommon
  implementation Dependencies.hiltViewModelLifecycle
  kapt Dependencies.hiltDaggerAndroidCompiler
  kapt Dependencies.hiltCompiler

  // Navigation
  implementation Dependencies.navComponentFragment
  implementation Dependencies.navComponentUi

  //Unit Testing
  testImplementation Dependencies.jUnit
  androidTestImplementation Dependencies.jUnitExt
  androidTestImplementation Dependencies.espresso
}